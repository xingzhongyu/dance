# Configuration for function minimization example
max_iterations: 5 #50
checkpoint_interval: 5

# LLM configuration
llm:
  primary_model: "deepseek-reasoner" #"deepseek-reasoner"
  # primary_model: "llama3.1-8b"
  primary_model_weight: 0.8
  secondary_model: "deepseek-reasoner" #"deepseek-reasoner"
  # secondary_model: "llama-4-scout-17b-16e-instruct"
  secondary_model_weight: 0.2
  api_base: "https://api.deepseek.com"
  # api_base: "https://api.cerebras.ai/v1"
  temperature: 0.7
  max_tokens: 8192
  timeout: 1200

# Prompt configuration
prompt:
  system_message: "

  ### Improved Agent Prompt (for scHeteroNet)

  You are an expert programmer specializing in Graph Neural Networks (GNNs) and computational biology, particularly in single-cell data analysis. Your task is to significantly improve a preprocessing script that constructs a cell-cell similarity graph for the `scHeteroNet` model. The primary goal is to enhance the graph's structure and feature representation to boost the performance of downstream tasks like cell-type classification and out-of-distribution detection.

  The script uses DGL, PyTorch, and scikit-learn. The core of the preprocessing involves building a k-Nearest Neighbors (k-NN) graph from a cell feature matrix. Your modifications should focus on the `HeteronetGraph` preprocessor class to create a more robust, informative, and computationally efficient graph specifically tailored for the `scHeteroNet` architecture.

  ---

  ### Context: The scHeteroNet Model Architecture

  To make informed improvements, you must understand the downstream GNN model:

  1.  **Dual Adjacency Propagation:** The core `HetConv` layer in `scHeteroNet` does not perform standard message passing. Instead, it aggregates information from two separate, pre-computed adjacency matrices:
      *   `adj_t`: The standard 1-hop normalized adjacency matrix.
      *   `adj_t2`: A **strict 2-hop** normalized adjacency matrix (neighbors of neighbors, excluding direct 1-hop neighbors).
      The model learns from both local (1-hop) and extended (2-hop) neighborhood structures simultaneously by concatenating their outputs.

  2.  **Internal Graph Processing (`init_adj` method):** The model performs its own specific normalization and processing of the input `edge_index`.
      *   It uses `gcn_norm` internally.
      *   Most importantly, it **explicitly removes all self-loops** from both the 1-hop and 2-hop adjacency matrices (`adj_t.remove_diag(0)`) and does **not** add them back during normalization (`add_self_loops=False`).

  ---

  ### Potential Improvement Strategies

  Focus your improvements on the `HeteronetGraph` class. Combine these strategies or develop your own, keeping the `scHeteroNet` architecture in mind.

  **1. Feature Space Engineering (Choosing what to build the graph from):**
  *   The current approach builds the graph directly on input features. The quality of these features is critical.
      *   **Dimensionality Reduction:** Before building the k-NN graph, apply dimensionality reduction like **PCA** to the input features. This reduces noise and captures the most significant axes of variation, leading to a more stable neighbor graph, which is vital for both the 1-hop and 2-hop structures.
      *   **Use Pre-computed Embeddings:** If available, build the graph on specialized single-cell embeddings (e.g., from scVI, scANVI) instead of raw or PCA-transformed data.

  **2. Advanced Graph Construction and Weighting:**
  *   The current graph is unweighted. This can be significantly improved.
      *   **Mutual k-NN:** Implement a mutual k-NN graph. An edge exists between cells A and B only if A is in B's k-neighbors *and* B is in A's k-neighbors. This creates a sparser, higher-confidence graph by removing noisy or asymmetric connections. **This is especially beneficial for `scHeteroNet`** because a cleaner 1-hop graph leads to a much more meaningful and less noisy 2-hop graph (`adj_t2`).
      *   **Edge Weighting:** The `NearestNeighbors` function can return distances. Use these to weight the edges, for instance with a Gaussian (heat) kernel: `weight = exp(-distance^2 / sigma^2)`. While the model's `gcn_norm` operates on an unweighted topology, these weights can be used to *prune* the graph by removing low-weight edges before passing it to the model.

  **3. Efficient and Native DGL Implementation:**
  *   The current implementation uses scikit-learn and manually converts the edge list. This is inefficient.
      *   **Action:** Replace the custom `build_graph` method with the native **`dgl.knn_graph`** function. This DGL function is significantly faster, can run on the GPU, and integrates seamlessly into the DGL workflow.

  **4. Graph Post-processing (Model-Specific):**
  *   **Crucial Constraint: Do NOT Add Self-Loops:** The most common GNN practice is to add self-loops. For this model, that is incorrect.
      *   **Action:** **Do not add self-loops** (e.g., do not call `dgl.add_self_loop`). The `scHeteroNet` model's `init_adj` method internally removes all self-loops to create its specific 1-hop and 2-hop adjacency matrices. Adding them in preprocessing is counterproductive.
  *   **Symmetrization:** The graph should be undirected. A standard k-NN graph is directed.
      *   **Action:** After creating the graph, make it undirected using **`dgl.to_bidirected(g, copy_ndata=True)`**. This is a more robust approach than simply adding reverse edges manually.

  **Constraints:**
  Do not change the `scHeteroNet` class, the main training loop, the command-line arguments, or the final evaluation output format. Your modifications must be confined to the data preprocessing and graph construction within the `HeteronetGraph` class.
  "
  
  include_artifacts: true
  max_artifact_bytes: 32768
  artifact_security_filter: true

# Database configuration
database:
  population_size: 50
  archive_size: 20
  num_islands: 3
  elite_selection_ratio: 0.2
  exploitation_ratio: 0.7

# Evaluator configuration
evaluator:
  timeout: 600000
  cascade_thresholds: [0.3]
  parallel_evaluations: 3

# Evolution settings
diff_based_evolution: true
max_code_length: 20000